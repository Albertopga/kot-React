'use strict';

var template = require('babel-template');

var boilerplate = 'callback => require.ensure([], require => {\n  let success = false, ret\n  try{\n    ret = SOURCE\n    success = true\n  }\n  catch(err) {\n    callback(err) \n  }\n  if(success){\n    callback(null, ret)  \n  }\n}';

var wrapper = template(boilerplate + ')');

var wrapperWithName = template(boilerplate + ', NAME)');

var TRUE = template('true');

function replace(attr, name) {
  var val = (name ? wrapperWithName : wrapper)({ SOURCE: attr.value.expression, NAME: name });
  attr.value.expression = val.expression;
}

module.exports = function (_ref) {
  var t = _ref.types;

  return {
    visitor: {
      JSXElement: function JSXElement(path) {
        if (path.node.openingElement.name.name === 'Modules') {
          (function () {
            var chunkName = path.node.openingElement.attributes.filter(function (attr) {
              return attr.name.name === 'chunkName';
            })[0];
            chunkName = chunkName ? chunkName.value : undefined;

            var included = path.node.openingElement.attributes.filter(function (attr) {
              return attr.name.name === 'include';
            }).length > 0;

            if (!included) {
              path.node.openingElement.attributes.forEach(function (attr) {
                return attr.name.name === 'load' && replace(attr, chunkName);
              });

              path.node.openingElement.attributes.push(t.jSXAttribute(t.jSXIdentifier('transpiled'), t.jSXExpressionContainer(TRUE().expression)));
            }
          })();
        }
      }
    }
  };
};