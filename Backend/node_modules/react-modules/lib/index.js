'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.hydrate = hydrate;
exports.flush = flush;
exports.preserve = preserve;
exports.preserved = preserved;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var isBrowser = typeof document !== 'undefined';

var Modules = exports.Modules = function (_React$Component) {
  _inherits(Modules, _React$Component);

  // static defaultProps = {
  //   onError() {}
  // }
  function Modules(props) {
    _classCallCheck(this, Modules);

    var _this = _possibleConstructorReturn(this, (Modules.__proto__ || Object.getPrototypeOf(Modules)).call(this, props));

    if (!_this.props.transpiled) {
      if (_this.props.defer) {
        // todo - prevent evaluation?
        return _possibleConstructorReturn(_this);
      }
      _this.state = {
        loaded: _this.props.load
      };
      return _possibleConstructorReturn(_this);
    }

    // possible async load 
    _this.state = {
      loaded: undefined
    };
    var sync = true;

    _this.props.load(function (err, loaded) {
      if (err) {
        if (!_this.props.onError) {
          throw err;
        }
        _this.props.onError(err);
      }
      if (sync) {
        _this.state.loaded = loaded;
      } else {
        _this.setState({ loaded: loaded });
      }
    });
    sync = false;
    return _this;
  }

  _createClass(Modules, [{
    key: 'unstable_handleError',
    value: function unstable_handleError(err) {
      if (!this.props.onError) {
        throw err;
      }
      this.props.onError(err);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      // hot loading and stuff 
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children(this.state.loaded);
    }
  }]);

  return Modules;
}(_react2.default.Component);

var cache = {};
function hydrate() {
  // get all data-preserve
  // cache innerhtml
  [].concat(_toConsumableArray(document.querySelectorAll('[data-preserve]'))).forEach(function (el) {
    var id = el.getAttribute('data-preserve');
    if (cache[id]) {
      console.warn('overwriting previous key ' + id + '!'); // eslint-disable-line no-console
    }
    cache[id] = el.innerHTML;
  });
}

function flush() {
  cache = {};
}

function preserve(id, element) {
  if (!(typeof element.type === 'string')) {
    throw new Error('cannot preserve non-DOM element');
  }
  return _react2.default.cloneElement(element, { 'data-preserve': id });
}

function preserved(id) {
  var Tag = arguments.length <= 1 || arguments[1] === undefined ? 'div' : arguments[1];
  var props = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return cache[id] ? _react2.default.createElement(Tag, _extends({}, props, { dangerouslySetInnerHTML: { __html: cache[id] } })) : undefined;
}

// isBrowser && hydrate() // whate harm could this do